import sys
import glob
from xml.etree import ElementTree
from datetime import datetime, timedelta
import json

universal_datetime_format = "%m/%d/%Y %H:%M:%S"
universal_time_format = "%H:%M:%S"

if len(sys.argv) == 5:
    xml_files_path = sys.argv[1]
    xml_files_extension = sys.argv[2]
    output_path = sys.argv[3]
    no_report_path = sys.argv[4]
else:
    print('4 arguments required: 1 = Path to RED-I generated report xml files, 2 = Extension of the files (example: 025-0334_report.xml, the extension would be report.xml), 3 = Where to put the output file, 4 = The no_report.txt file generated by redi-uniq')
    exit()

def writeLog(message):
    timestamp = datetime.now().strftime('%Y-%m-%d:%H:%M:%S')
    sys.stdout.write(timestamp + ' - ' + message + '\n')

def makeDateTime(date_string=None, time_string=None, datetime_string=None):
    new_datetime_string = None
    if date_string and time_string:
        new_datetime_string = date_string + ' ' + time_string
    elif time_string and not date_string:
        return datetime.strptime(time_string, universal_time_format)
    else:
        if datetime_string:
            new_datetime_string = datetime_string

    if new_datetime_string:
        datetime_object = datetime.strptime(new_datetime_string, universal_datetime_format)
    else:
        datetime_object = None

    return datetime_object

def makeDateTimeString(datetime_object):
    return datetime_object.strftime(universal_datetime_format)

def formatTimeDelta(td):
    hours, remainder = divmod(td.total_seconds(), 3600)
    minutes, seconds = divmod(remainder, 60)
    hours, minutes, seconds = int(hours), int(minutes), int(seconds)
    if hours < 10:
        hours = '0%s' % int(hours)
    if minutes < 10:
        minutes = '0%s' % minutes
    if seconds < 10:
        seconds = '0%s' % seconds
    return '%s:%s:%s' % (hours, minutes, seconds)

def makeTimeString(datetime_object):
    return datetime_object.strftime(universal_time_format)

def run(xml_files_path, xml_files_extension):
    xml_files = glob.glob(xml_files_path + '/*' + xml_files_extension)
    output_data = {
        'reports': {},
        'combined_data': {
            'project': None,
            'redcap_url': None,
            'dates': [],
            'forms': {},
            'performance': {
                'total_time': None,
                'first_run_time': None,
                'last_run_time': None,
                'fastest_run_time': None
            },
            'errors': [],
            'totals': {
                'count': {
                    'good': 0,
                    'bad': 0,
                    'total': 0
                },
                'good': [],
                'bad': []
            }
        }
    }

    for xml_file in xml_files:
        xml_tree = ElementTree.parse(xml_file)
        report = xml_tree.getroot()

        header = report.find('header')
        project = header.find('project').text
        redcap_url = header.find('redcapServerAddress').text
        date = header.find('date').text

        output_data['combined_data']['project'] = project
        output_data['combined_data']['redcap_url'] = redcap_url

        if date not in output_data['combined_data']['dates']:
            output_data['combined_data']['dates'].append(date)

        summary = report.find('summary')
        subjects_details = report.find('subjectsDetails')
        subjects = subjects_details.findall('subject')

        for subject in subjects:
            # subject = subjects_details.find('subject')

            redcap_id = subject.find('redcap_id').text
            lab_id = subject.find('lab_id').text

            if lab_id not in output_data['reports']:
                output_data['reports'][lab_id] = {'forms': {}, 'redcap_id': None, 'errors': []}

            output_data['reports'][lab_id]['redcap_id'] = redcap_id

            errors = report.find('errors')
            errors = errors.findall('error')
            for error in errors:
                error_text = error.text
                if error_text not in output_data['combined_data']['errors']:
                    output_data['combined_data']['errors'].append(error_text)
                output_data['reports'][lab_id]['errors'].append(error_text)

            time_all_start = report.find('time_all_start').text
            start_datetime = makeDateTime(date, time_all_start)

            time_all_end = report.find('time_all_end').text
            end_datetime = makeDateTime(date, time_all_end)
            if end_datetime < start_datetime:
                end_datetime = end_datetime + timedelta(days=1)

            diff_datetime = end_datetime - start_datetime

            output_data['reports'][lab_id]['time_all_start'] = time_all_start
            output_data['reports'][lab_id]['time_all_end'] = time_all_end
            output_data['reports'][lab_id]['time_all_diff'] = formatTimeDelta(diff_datetime)

            current_first_run_time = output_data['combined_data']['performance']['first_run_time']
            if current_first_run_time:
                current_first_run_time = makeDateTime(datetime_string=current_first_run_time)
                if start_datetime < current_first_run_time:
                    output_data['combined_data']['performance']['first_run_time'] = makeDateTimeString(start_datetime)
            else:
                output_data['combined_data']['performance']['first_run_time'] = makeDateTimeString(start_datetime)

            current_last_run_time = output_data['combined_data']['performance']['last_run_time']
            if current_last_run_time:
                current_last_run_time = makeDateTime(datetime_string=current_last_run_time)
                if end_datetime > current_last_run_time:
                    output_data['combined_data']['performance']['last_run_time'] = makeDateTimeString(end_datetime)
            else:
                output_data['combined_data']['performance']['last_run_time'] = makeDateTimeString(end_datetime)

            current_fastest_run_time = output_data['combined_data']['performance']['fastest_run_time']
            if current_fastest_run_time:
                current_fastest_run_time = makeDateTime(date, current_fastest_run_time)
                current_fastest_run_time = timedelta(hours=current_fastest_run_time.hour, minutes=current_fastest_run_time.minute, seconds=current_fastest_run_time.second)
                if diff_datetime < current_fastest_run_time:
                    output_data['combined_data']['performance']['fastest_run_time'] = formatTimeDelta(diff_datetime)
            else:
                output_data['combined_data']['performance']['fastest_run_time'] = formatTimeDelta(diff_datetime)

            if current_last_run_time and current_first_run_time:
                formatted_time_delta = formatTimeDelta(current_last_run_time - current_first_run_time)
                output_data['combined_data']['performance']['total_time'] = formatted_time_delta
            else:
                output_data['combined_data']['performance']['total_time'] = formatTimeDelta(diff_datetime)

            forms = subject.find('forms')
            forms = forms.findall('form')
            for form in forms:
                form_name = form.find('form_name').text
                form_name = form_name.replace('Total_', '')
                form_name = form_name.replace('_Forms', '')
                form_count = form.find('form_count')
                form_count = int(form_count.text)

                if form_name not in output_data['combined_data']['forms']:
                    output_data['combined_data']['forms'][form_name] = {'count': 0}

                output_data['combined_data']['forms'][form_name]['count'] += form_count

                if form_name not in output_data['reports'][lab_id]['forms']:
                    output_data['reports'][lab_id]['forms'][form_name] = {'count': form_count}

            writeLog('Loading Participant: ' + redcap_id)
            output_data['combined_data']['totals']['count']['total'] += 1
            output_data['combined_data']['totals']['count']['good'] += 1
            output_data['combined_data']['totals']['good'].append({'redcap_id': redcap_id, 'lab_id': lab_id})

    with open(no_report_path, 'r') as no_report_file:
        no_report_data = no_report_file.read().split('\n')
        for line in no_report_data:
            if line:
                output_data['combined_data']['totals']['count']['total'] += 1
                output_data['combined_data']['totals']['count']['bad'] += 1
                output_data['combined_data']['totals']['bad'].append(line.strip())

    writeLog('Storing: ' + output_path)
    with open(output_path, 'w') as output_file:
        output_file.write(json.dumps(output_data, indent=4, sort_keys=True))

if xml_files_path and xml_files_extension and output_path:
    run(xml_files_path, xml_files_extension)
